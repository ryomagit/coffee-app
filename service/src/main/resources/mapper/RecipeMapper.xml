<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.coffeeApp.mapper.RecipeMapper">

<!--     <resultMap id="recipeResultMap" type="com.coffeeApp.dto.Recipe">
        <id property="id" column="recipe_id"/>
        <result property="title" column="title"/>
        <result property="createdAt" column="created_at"/>
        <result property="brewingMethod" column="brewing_method"/>
        <result property="roastLevel" column="roast_level"/>
        <result property="beanAmount" column="bean_amount"/>
        <result property="grindSize" column="grind_size"/>
        <result property="waterTemp" column="water_temp"/>
        <result property="authorMailAddress" column="author_mail_address"/>
        <result property="favoriteCount" column="favorite_count"/>
        <result property="isFavorited" column="is_favorited"/>
        <collection property="steps" ofType="com.coffeeApp.dto.RecipeStep">
            <id property="id" column="step_id"/>
            <result property="startTime" column="start_time"/>
            <result property="endTime" column="end_time"/>
            <result property="waterAmount" column="water_amount"/>
        </collection>
    </resultMap>

    <select id="getRecipesWithDetails" resultMap="recipeResultMap">
        SELECT
            r.id AS recipe_id,
            r.title,
            r.created_at,
            r.brewing_method,
            r.roast_level,
            r.bean_amount,
            r.grind_size,
            r.water_temp,
            r.author_mail_address, 
            rs.id AS step_id,
            rs.start_time,
            rs.end_time,
            rs.water_amount,
            COUNT(DISTINCT f.recipe_id) OVER(PARTITION BY r.id) AS favorite_count,
            CASE 
                WHEN #{emailAddress} IS NOT NULL AND EXISTS (
                    SELECT 1 
                    FROM favorites f2 
                    WHERE f2.recipe_id = r.id AND f2.user_mail_address = #{emailAddress}
                ) THEN TRUE
                ELSE FALSE
            END AS is_favorited
        FROM 
            recipes r
        LEFT JOIN 
            recipe_steps rs ON r.id = rs.recipe_id
        LEFT JOIN 
            favorites f ON r.id = f.recipe_id
        ORDER BY 
            r.created_at DESC, rs.start_time;
    </select>
 -->
	 <resultMap id="recipeResultMap" type="com.coffeeApp.dto.Recipe">
	    <id property="id" column="recipe_id"/>
	    <result property="title" column="title"/>
	    <result property="memo" column="memo"/>
	    <result property="createdAt" column="created_at"/>
	    <result property="brewingMethod" column="brewing_method"/>
	    <result property="roastLevel" column="roast_level"/>
	    <result property="beanAmount" column="bean_amount"/>
	    <result property="grindSize" column="grind_size"/>
	    <result property="waterTemp" column="water_temp"/>
	    <result property="favoriteCount" column="favorite_count"/>
	    <result property="isFavorited" column="is_favorited"/>
	    <result property="isOwner" column="is_owner"/>
	    <collection property="steps" ofType="com.coffeeApp.dto.RecipeStep">
	        <id property="id" column="step_id"/>
	        <result property="recipeId" column="recipe_id"/>
	        <result property="startTime" column="start_time"/>
	        <result property="waterAmount" column="water_amount"/>
	    </collection>
	</resultMap>

	<select id="getRecipesWithDetails" resultMap="recipeResultMap">
	    WITH favorite_counts AS (
	        SELECT 
	            recipe_id, 
	            COUNT(*) AS favorite_count
	        FROM 
	            favorites
	        GROUP BY 
	            recipe_id
	    ),
	    aggregated_steps AS (
	        SELECT 
	            recipe_id, 
	            id AS step_id,
	            start_time,
	            water_amount
	        FROM 
	            recipe_steps
	    )
	    SELECT
	        r.id AS recipe_id,
	        r.title,
	        r.memo,
	        r.created_at,
	        r.brewing_method,
	        r.roast_level,
	        r.bean_amount,
	        r.grind_size,
	        r.water_temp,
	        rs.recipe_id,
	        rs.step_id,
	        rs.start_time,
	        rs.water_amount,
	        COALESCE(fc.favorite_count, 0) AS favorite_count,
	        CASE 
	            WHEN #{emailAddress} IS NOT NULL AND EXISTS (
	                SELECT 1 
	                FROM favorites f2 
	                WHERE f2.recipe_id = r.id AND f2.user_mail_address = #{emailAddress}
	            ) THEN TRUE
	            ELSE FALSE
	        END AS is_favorited,
	        CASE
		        WHEN #{emailAddress} IS NOT NULL AND r.author_mail_address = #{emailAddress}
		        THEN TRUE
		        ELSE FALSE
	    	END AS is_owner
	    FROM 
	        recipes r
	    LEFT JOIN 
	        aggregated_steps rs ON r.id = rs.recipe_id
	    LEFT JOIN 
	        favorite_counts fc ON r.id = fc.recipe_id
	    ORDER BY 
	        r.created_at DESC, rs.start_time;
	</select>
	<!-- レシピを削除 -->
    <delete id="deleteRecipe" parameterType="int">
        DELETE FROM recipes
        WHERE id = #{recipeId}
    </delete>
    <!--　レシピを追加  -->
    <insert id="insertRecipe" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO recipes (
        title,
        memo,
        created_at,
        brewing_method,
        roast_level,
        bean_amount,
        grind_size,
        water_temp,
        author_mail_address
    ) VALUES (
        #{title},
        #{memo},
        NOW(),
        #{brewingMethod},
        #{roastLevel},
        #{beanAmount},
        #{grindSize},
        #{waterTemp},
        #{authorMailAddress}
    )
</insert>

<select id="getRecipeWithDetails" resultMap="recipeResultMap">
	    WITH favorite_counts AS (
	        SELECT 
	            recipe_id, 
	            COUNT(*) AS favorite_count
	        FROM 
	            favorites
	        GROUP BY 
	            recipe_id
	    ),
	    aggregated_steps AS (
	        SELECT 
	            recipe_id, 
	            id AS step_id,
	            start_time,
	            water_amount
	        FROM 
	            recipe_steps
	    )
	    SELECT
	        r.id AS recipe_id,
	        r.title,
	        r.memo,
	        r.created_at,
	        r.brewing_method,
	        r.roast_level,
	        r.bean_amount,
	        r.grind_size,
	        r.water_temp,
	        rs.step_id,
	        rs.recipe_id,
	        rs.start_time,
	        rs.water_amount,
	        COALESCE(fc.favorite_count, 0) AS favorite_count,
	        CASE 
	            WHEN #{emailAddress} IS NOT NULL AND EXISTS (
	                SELECT 1 
	                FROM favorites f2 
	                WHERE f2.recipe_id = r.id AND f2.user_mail_address = #{emailAddress}
	            ) THEN TRUE
	            ELSE FALSE
	        END AS is_favorited,
	        CASE
		        WHEN #{emailAddress} IS NOT NULL AND r.author_mail_address = #{emailAddress}
		        THEN TRUE
		        ELSE FALSE
	    	END AS is_owner
	    FROM 
	        recipes r
	    LEFT JOIN 
	        aggregated_steps rs ON r.id = rs.recipe_id
	    LEFT JOIN 
	        favorite_counts fc ON r.id = fc.recipe_id
	    WHERE r.id = #{id}
	    ORDER BY 
	        r.created_at DESC, rs.start_time;
	</select>
	
	<update id="updateRecipe" parameterType="com.coffeeApp.dto.Recipe">
	    UPDATE recipes
	    SET 
	        title = #{title},
	        memo = #{memo},
	        brewing_method = #{brewingMethod},
	        roast_level = #{roastLevel},
	        bean_amount = #{beanAmount},
	        grind_size = #{grindSize},
	        water_temp = #{waterTemp}
	    WHERE 
	        id = #{id} 
	</update>
</mapper>